↑default: true
anonymousReplication: deny
databaseName: retaildb
↓AllDocs [transactions.couchdb.AllDocsTransaction]: 
  q_include_docs: true
  q_limit: 5
  ↓_use_keys2 [variables.RequestableMultiValuedVariable-1573563480577]: 
    description: Document keys, return only documents where the key matches
    value: 
      - xmlizable: 
        - ↑classname: com.twinsoft.convertigo.beans.common.XMLVector
        - com.twinsoft.convertigo.beans.common.XMLVector: 
          - java.lang.String: 
            - ↑value: category_42_48194
          - java.lang.String: 
            - ↑value: category_42_48196
↓GetDocumentIdentifier [transactions.couchdb.GetDocumentTransaction]: 
  accessibility: Private
  ↓Test_Case [core.TestCase]: 
    ↓_use_docid [variables.TestCaseVariable-1434123999829]: 
      description: Document ID
      value: product_42_3181232138659
  ↓_use_docid [variables.RequestableVariable-1434113909720]: 
    description: Document ID
↓GetServerInfo [transactions.couchdb.GetServerInfoTransaction]: 
  ↑default: true
↓PostBulkDocuments [transactions.couchdb.PostBulkDocumentsTransaction]: 
  accessibility: Private
  fullSyncAclPolicy: fromKeyC8oAcl
  ↓_id [variables.RequestableMultiValuedVariable-1433945902580]: 
    description: Documents contents
  ↓imageUrl [variables.RequestableMultiValuedVariable-1433945902596]: 
  ↓leaf [variables.RequestableMultiValuedVariable-1433945902603]: 
  ↓levelId [variables.RequestableMultiValuedVariable-1433945902613]: 
  ↓levelIdFather [variables.RequestableMultiValuedVariable-1433945902624]: 
  ↓name [variables.RequestableMultiValuedVariable-1433945902631]: 
  ↓nameSource [variables.RequestableMultiValuedVariable-1433945902639]: 
  ↓position [variables.RequestableMultiValuedVariable-1433945902645]: 
  ↓shopCode [variables.RequestableMultiValuedVariable-1433945902652]: 
  ↓sourceBreadcrumb [variables.RequestableMultiValuedVariable-1433945902659]: 
  ↓packaging [variables.RequestableVariable-1433945902666]: 
  ↓priceOfUnit [variables.RequestableMultiValuedVariable-1433945902673]: 
  ↓unitPrice [variables.RequestableMultiValuedVariable-1433945902680]: 
  ↓sku [variables.RequestableMultiValuedVariable-1433945902687]: 
  ↓_c8oAcl [variables.RequestableVariable-1514274348200]: 
    description: Set the owner of the document if the "Acl Policy"="From _c8oACL variable"
↓ResetDatabase [transactions.couchdb.ResetDatabaseTransaction]: 
  accessibility: Private
↓design [couchdb.DesignDocument]: 
  docdata: 
    →: |
      '{
        "filters": {},
        "updates": {
          "checkIfModified": "function (doc, req) {\r\n
      \r\n
          \/\/ Check recursively if the document in database and the new document are the same\r\n
          var recursiveCheck = function (dbDoc, newDoc) {\r\n
              \/\/ Loop on the database document fields and check if they exist in the new document\r\n
              for (var key in dbDoc) {\r\n
                  if (typeof newDoc[key] != typeof dbDoc[key]) {\r\n
                      \/\/ log(\"1 \" + key + \" \" + typeof newDoc[key] + \" \" + typeof dbDoc[key]);\r\n
                      return false;\r\n
                  }\r\n
              }\r\n
              \r\n
              \/\/ Loop on the new document fields and check if they exist in the database document\r\n
              for (var key in newDoc) {\r\n
                  if (typeof newDoc[key] != typeof dbDoc[key]) {\r\n
                      \/\/ log(\"2 \" + key + \" \" + typeof newDoc[key] + \" \" + typeof dbDoc[key]);\r\n
                      return false;\r\n
                  } else if (typeof dbDoc[key] == \"object\") {\r\n
                      if (!recursiveCheck(dbDoc[key], newDoc[key])) {\r\n
                          return false;\r\n
                      }\r\n
                  } else {\r\n
                      if (dbDoc[key] != newDoc[key]) {\r\n
                          \/\/ log(\"3 \" + key + \" \" + newDoc[key] + \" \" + typeof dbDoc[key]);\r\n
                          return false;\r\n
                      }\r\n
                  }\r\n
              }\r\n
              \r\n
              return true;\r\n
          }\r\n
      \r\n
          var json = JSON.parse(req.body);\r\n
          json._id = req.id;\r\n
          \r\n
          if (json.shopCode) {\r\n
              json[''~c8oAcl''] = json.shopCode;\r\n
          }\r\n
          \r\n
          \/\/ Cast string to integer\r\n
          if (json.position) {\r\n
              json.position = json.position * 1;\r\n
          }\r\n
          \r\n
          if (doc != null) {\r\n
              for (var key in doc) {\r\n
                  if (key.charAt(0) == \"_\") {\r\n
                      json[key] = doc[key];\r\n
                  }\r\n
              }\r\n
              \r\n
              if (doc.levelIdFather && !json.levelIdFather) {\r\n
                  json.levelIdFather = doc.levelIdFather;\r\n
              }\r\n
              if (doc.imageUrl && !json.imageUrl) {\r\n
                  json.imageUrl = doc.imageUrl;\r\n
              }\r\n
              if (doc.position && !json.position) {\r\n
                  json.position = doc.position;\r\n
              }\r\n
          }\r\n
          \r\n
          \r\n
          if (doc != null && recursiveCheck(doc, json)) {\r\n
              return [null, {json: {id: json._id}}];\r\n
          } else {\r\n
              return [json, {json: {id: json._id}}];\r\n
          }\r\n
      }",
          "updateCrossSellingSkusProductCategories": "function (doc, req) {\r\n
          var json = JSON.parse(req.body);\r\n
          \r\n
          if (doc != null) {\r\n
              if (json.levelIdFather) {\r\n
                  if (!doc.levelIdFather || JSON.stringify(doc.levelIdFather) != json.levelIdFather) {\r\n
                      doc.levelIdFather = JSON.parse(json.levelIdFather);\r\n
                      return [doc, {json: {id: json._id}}];\r\n
                  }\r\n
              }\r\n
          }\r\n
          \r\n
          return [null, {json: {id: json._id}}];\r\n
          \r\n
          \/*try {\r\n
              var json = JSON.parse(req.body);\r\n
              return [doc, json: {result: ''nothing done''}];\r\n
          } catch (err) {\r\n
              log(err.message);\r\n
          }*\/\r\n
      }",
          "update": "function (doc, req) {\r\n
          try {\r\n
              var json = JSON.parse(req.body);\r\n
              json._id = req.id;\r\n
              \r\n
              json[''~pouet''] = \"pouet\";\r\n
              \r\n
              if (doc != null) {\r\n
              \/\/ json._rev = doc._rev;\r\n
              for (var key in doc) {\r\n
                  if (key.charAt(0) == \"_\") {\r\n
                      json[key] = doc[key];\r\n
                  }\r\n
              }\r\n
          }\r\n
              \r\n
              return [json, {json: {id: json._id}}];\r\n
          } catch (err) {\r\n
              log(err.message);\r\n
          }\r\n
      }",
          "updateCrossCategoriesLevelFatherId": "function (doc, req) {\r\n
          var json = JSON.parse(req.body);\r\n
          \r\n
          if (doc != null) {\r\n
              if (json.levelIdFather) {\r\n
                  if (!doc.levelIdFather || JSON.stringify(doc.levelIdFather) != json.levelIdFather) {\r\n
                      doc.levelIdFather = JSON.parse(json.levelIdFather);\r\n
                      return [doc, {json: {id: json._id}}];\r\n
                  }\r\n
              }\r\n
          }\r\n
          \r\n
          return [null, {json: {id: json._id}}];\r\n
          \r\n
          \/*try {\r\n
              var json = JSON.parse(req.body);\r\n
              return [doc, json: {result: ''nothing done''}];\r\n
          } catch (err) {\r\n
              log(err.message);\r\n
          }*\/\r\n
      }"
        },
        "views": {"children_byFather": {"map": "function (doc) {\r\n
          \/\/ Get Products AND Categories by levelIdFather\r\n
          if (doc.shopCode && doc.levelIdFather) {\r\n
              if (doc.levelId) { \/\/ Category\r\n
                  \/\/ Category root\r\n
                  if (doc.position) {\r\n
                      for (var key in doc.levelIdFather) {\r\n
                          emit([doc.shopCode, doc.levelIdFather[key], doc.position], {name : doc.name, levelId : doc.levelId, leaf : doc.leaf, imageUrl : doc.imageUrl});\r\n
                      }\r\n
                  } else {\r\n
                      for (var key in doc.levelIdFather) {\r\n
                          emit([doc.shopCode, doc.levelIdFather[key]], {name : doc.name, levelId : doc.levelId, leaf : doc.leaf, imageUrl : doc.imageUrl});\r\n
                      }\r\n
                  }\r\n
              } else if (doc.sku) { \/\/ Product\r\n
                  for (var key in doc.levelIdFather) {\r\n
                      emit([doc.shopCode, doc.levelIdFather[key]], {sku : doc.sku, name : doc.name, packaging : doc.packaging, priceOfUnit : doc.priceOfUnit, unitPrice : doc.unitPrice, imageUrl : doc.imageUrl });\r\n
                  }\r\n
              }\r\n
          }\r\n
      }"}},
        "_id": "_design\/design"
      }'